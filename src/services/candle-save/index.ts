import { sleepSync } from "bun";
import cron from "node-cron";
import type { PoolClient } from "pg";
import { v4 as uuidv4 } from "uuid";
import { createPool, notify } from "../../shared/config/database";
import logger from "../../shared/config/logger";
import { CHANNEL } from "../../shared/const/channel.const";
import { QUERIES } from "../../shared/const/query.const";
import type { iCandle } from "../../shared/interfaces/iCandle";
import type { iStrategyInfo } from "../../shared/interfaces/iStrategy";
import API from "../../shared/services/api";
import i18n from "../../shared/services/i18n";
import webhook from "../../shared/services/webhook";

/** Ï†ÑÏó≠Î≥ÄÏàò */

/**
 * @name pool
 * @description Database Pool
 */
const pool = createPool();
let client: PoolClient;

const MAX_RECONNECT_ATTEMPTS = 5;
let reconnectAttempts = 0;

/**
 * @name IS_CANDLE_ERROR_SENT
 * @description 5Î∂ÑÎßàÎã§ ÌïúÎ≤àÏî©Îßå Ïò§Î•ò Î©îÏãúÏßÄÎ•º Ï†ÑÏÜ°ÌïòÍ∏∞ ÏúÑÌïú Íµ¨Î∂Ñ Í∞í
 */
let IS_CANDLE_ERROR_SENT = false;

const loggerPrefix = `CANDLE-SAVE_${process.env.CRYPTO_CODE}`;

/**
 * @name setup
 * @description Setup
 */
async function setup() {
	try {
		IS_CANDLE_ERROR_SENT = false;
		client = await pool.connect();
		await client.query(QUERIES.INIT);

		logger.warn("CANDLE_SAVE_START", loggerPrefix);

		checkAndSendStatus();

		// Ïó∞Í≤∞ ÏóêÎü¨ Ìï∏Îì§ÎßÅ Ï∂îÍ∞Ä
		client.on("error", async (err) => {
			logger.error("DB_CONNECTION_ERROR", loggerPrefix, err.message);
			await reconnect();
		});
	} catch (error) {
		if (error instanceof Error) {
			logger.error("INIT_SETUP_ERROR", loggerPrefix, error.message);
		} else {
			logger.error("INIT_SETUP_ERROR", loggerPrefix);
		}
		await reconnect();
	}
}

async function reconnect() {
	try {
		if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {
			logger.error("RECONNECT_ERROR", loggerPrefix);
			await handleGracefulShutdown();
			return;
		}

		reconnectAttempts++;
		logger.info("RECONNECT_ATTEMPTS", loggerPrefix);

		if (client) {
			await client.release();
		}
		await setup();

		reconnectAttempts = 0;
	} catch (error) {
		logger.error("RECONNECT_ERROR", loggerPrefix);
		sleepSync(5000);
	}
}

/**
 * @name fetchAndSaveCandles
 * @description Ï∫îÎì§ Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏ÏôÄÏÑú Ï†ÄÏû•ÌïòÎäî ÌïµÏã¨ Î°úÏßÅ
 * @param count Í∞ÄÏ†∏Ïò¨ Ï∫îÎì§Ïùò Ïàò
 */
async function fetchAndSaveCandles(count = 3) {
	try {
		const data = await API.GET_CANDLE_DATA(
			process.env.CRYPTO_CODE || "",
			count,
		);

		await saveCandleData(data);
	} catch (error) {
		logger.error("FETCH_CANDLE_DATA_ERROR", loggerPrefix);
	}
}

/**
 * @name saveMarketData
 * @description Ï∫îÎì§ Îç∞Ïù¥ÌÑ∞Î•º Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•ÌïòÎäî ÌïµÏã¨ Î°úÏßÅ
 * @param data Ï†ÄÏû•Ìï† Ï∫îÎì§ Îç∞Ïù¥ÌÑ∞
 */
async function saveCandleData(data: iCandle[]) {
	try {
		await Promise.all(
			data.map((candle) =>
				client.query<iCandle>(QUERIES.UPSERT_MARKET_DATA, [
					candle.market,
					new Date(candle.candle_date_time_kst),
					candle.opening_price,
					candle.high_price,
					candle.low_price,
					candle.trade_price,
					candle.candle_acc_trade_volume,
				]),
			),
		);

		if (process.env.NODE_ENV === "development") {
			logger.info("CANDLE_SAVE_NORMAL_COLLECTING", loggerPrefix);
		}

		notify(pool, CHANNEL.ANALYZE_CHANNEL);
	} catch (error: unknown) {
		if (error instanceof Error) {
			webhook.send(`[CANDLE-SAVE] ${error.message}`);
		} else {
			webhook.send(`[CANDLE-SAVE] ${i18n.getMessage("CANDLE_SAVE_DB_ERROR")}`);
		}
	}
}

/**
 * @name handleGracefulShutdown
 * @description ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å Ï≤òÎ¶¨Î•º ÏúÑÌïú Í≥µÌÜµ Ìï®Ïàò
 */
async function handleGracefulShutdown() {
	webhook.send(i18n.getMessage("SERVICE_SHUTDOWN"));
	await pool.end();
	process.exit(0);
}

await setup();

cron.schedule("*/3 * * * * *", async () => {
	try {
		await fetchAndSaveCandles();
	} catch (error: unknown) {
		if (!IS_CANDLE_ERROR_SENT) {
			IS_CANDLE_ERROR_SENT = true;
			if (error instanceof Error) {
				logger.error("CANDLE_SAVE_API_ERROR", loggerPrefix, error.message);
			} else {
				logger.error("CANDLE_SAVE_API_ERROR", loggerPrefix);
			}
		}
	}
});

async function checkAndSendStatus() {
	try {
		const status = await API.GET_ACCOUNT_STATUS();
		const strategyQuery = await client.query<iStrategyInfo>(
			QUERIES.GET_LATEST_STRATEGY,
		);
		const strategy = strategyQuery.rows[0];

		const currentPriceQuery = await client.query<{ close_price: number }>(
			QUERIES.GET_CURRENT_PRICE,
		);
		const { close_price } = currentPriceQuery.rows[0];

		const fluctuationRate = Number(
			(
				((close_price - status.cryptoBuyPrice) / status.cryptoBuyPrice) *
				100
			).toFixed(2),
		);

		let additionalInfo = "";
		if (status.cryptoBalance > 0) {
			additionalInfo = `
**ÌèâÍ∑† Îß§Ïàò Í∏àÏï°**: ${status.cryptoBuyPrice}
**Ï¥ù Îß§Ïàò Í∏àÏï°**: ${status.cryptoEvalAmount}
**ÌòÑÏû¨ ÌèâÍ∞Ä Í∏àÏï°**: ${status.cryptoBalance * close_price}
**Îì±ÎùΩÏú®**: ${fluctuationRate > 0 ? "üîºüòä" : "üîΩüò¢"} ${fluctuationRate}%`;
		}

		webhook.send(
			`
### [CANDLE-SAVE ÏÉÅÌÉú Ï≤¥ÌÅ¨ üîç] 
**ÌòÑÏû¨ ÏõêÌôî**: ${status.krwBalance}
**ÌòÑÏû¨ ${process.env.CRYPTO_CODE}**: ${status.cryptoBalance}${additionalInfo}
**Í±∞Îûò ÌÉêÏßÄ ÏÉÅÌÉú**: ${status.tradingStatus}
**Í∏∞Ï§Ä ÏãúÍ∞Ñ**: ${strategy.hour_time}
**RSI**: ${strategy.rsi}
**Îã®Í∏∞ MA**: ${strategy.short_ma}
**Ïû•Í∏∞ MA**: ${strategy.long_ma}
**ÌòÑÏû¨ Í±∞ÎûòÎüâ**: ${strategy.current_volume}
**ÌèâÍ∑† Í±∞ÎûòÎüâ**: ${strategy.avg_volume}`,
		);
	} catch (error) {
		logger.error("CHECK_STATUS_ERROR", loggerPrefix);
	}
}

// Ï£ºÍ∞Ñ ÏãúÍ∞ÑÎåÄ (8-21Ïãú): 30Î∂Ñ Í∞ÑÍ≤©
cron.schedule("*/30 8-21 * * *", checkAndSendStatus);

// ÏïºÍ∞Ñ ÏãúÍ∞ÑÎåÄ (21-8Ïãú): 1ÏãúÍ∞Ñ Í∞ÑÍ≤©
cron.schedule("0 21-23,0-7 * * *", checkAndSendStatus);

cron.schedule(process.env.CANDLE_SAVE_INTERVAL || "0 */5 * * * *", () => {
	IS_CANDLE_ERROR_SENT = false;
});

process.stdin.resume();

process.on("uncaughtException", (error) => {
	logger.error(
		"UNEXPECTED_ERROR",
		`${loggerPrefix} ${uuidv4()}`,
		error.message,
	);
});

process.on("unhandledRejection", (reason, promise) => {
	if (reason instanceof Error) {
		logger.error(
			"UNEXPECTED_ERROR",
			`${loggerPrefix} ${uuidv4()}`,
			reason.message,
		);
	} else if (typeof reason === "string") {
		logger.error("UNEXPECTED_ERROR", `${loggerPrefix} ${uuidv4()}`, reason);
	} else {
		logger.error(
			"UNEXPECTED_ERROR",
			`${loggerPrefix} ${uuidv4()}`,
			"unhandledRejection",
		);
	}
});

// SIGINT (Ctrl+C)ÏôÄ SIGTERM Î™®Îëê ÎèôÏùºÌïú Ï¢ÖÎ£å Ï≤òÎ¶¨
process.on("SIGINT", handleGracefulShutdown);
process.on("SIGTERM", handleGracefulShutdown);
